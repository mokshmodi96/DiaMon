apply from: "${rootDir}/dependencies.gradle"
apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'realm-android'

android {
    compileSdkVersion 26
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        applicationId "com.login_signup_screendesign_demo"
        minSdkVersion 16
        targetSdkVersion 26

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}
repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}
dependencies {
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:support-v4:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.squareup.retrofit2:retrofit:2.0.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation deps.android.support.design
    implementation deps.android.support.cardView
    implementation deps.android.support.recyclerView
    implementation deps.android.support.percent
    // Other libraries
    implementation deps.ChrisJenx.calligraphy
    implementation deps.DanLew.androidJoda
    implementation(deps.MikePenz.materialDrawer) {
        transitive = true
    }
    implementation deps.PaoloRotolo.expandableHeightListView
    implementation deps.PhilJay.mpAndroidChart
    implementation 'de.hdodenhof:circleimageview:2.2.0'

    // Butterknife
    implementation deps.JakeWharton.butterKnife.core
    annotationProcessor deps.JakeWharton.butterKnife.compiler

    // Tests
    testImplementation deps.junit
    testImplementation deps.mockito
    testImplementation deps.square.assertJAndroid
    testImplementation deps.robolectric.core
    testImplementation deps.robolectric.shadows

    // This is for Mockito and Realm (TODO: find clean solution)
    testImplementation 'io.reactivex.rxjava2:rxjava:2.1.14'

    // Instrumental Tests
    androidTestImplementation deps.android.test.runner
    androidTestImplementation deps.android.test.rules
    androidTestImplementation deps.android.test.espresso.core
    androidTestImplementation deps.android.test.espresso.intents
    androidTestImplementation deps.android.test.espresso.contrib

}
def getAllLocales() {
    def foundLocales = new StringBuilder()
    foundLocales.append("new String[]{")

    fileTree("src/main/res").visit { FileVisitDetails details ->
        if (details.file.path.endsWith("strings.xml")) {
            def languageCode = details.file.parent.tokenize('/\\').last().replaceAll('values-', '').replaceAll('-r', '-')
            languageCode = (languageCode == "values") ? "en" : languageCode
            foundLocales.append("\"").append(languageCode).append("\"").append(",")
        }
    }

    foundLocales.append("}")
    //Don't forget to remove the trailing comma
    return foundLocales.toString().replaceAll(',}', '}')
}


def coverageSourceDirs = ['src/main/java']

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = 'Reporting'

    description = 'Generate Jacoco coverage reports'

    classDirectories = fileTree(dir: 'build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewBinder*.*',
                       '**/*$InjectAdapter.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       'io/realm/**/*'])

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = false
    }
}

apply plugin: 'com.github.kt3k.coveralls'

coveralls {
    sourceDirs = files(['src/main/java']).files.absolutePath
    jacocoReportPath = 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
}

// run: gradlew -PwithDexcount assembleDebug
def dexCount = project.hasProperty('withDexcount')
if (dexCount) {
    apply plugin: 'com.getkeepsafe.dexcount'

    dexcount {
        includeTotalMethodCount = true
    }
}